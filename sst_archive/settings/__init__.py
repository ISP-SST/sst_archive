"""
Shared Django settings for sst_archive project.

Generated by 'django-admin startproject' using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import datetime
from pathlib import Path
import json
import os
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

SECRETS_FILE = os.path.join(BASE_DIR, 'secrets.json')

try:
    with open(SECRETS_FILE) as secrets_file:
        secrets = json.load(secrets_file)
except:
    raise ImproperlyConfigured('Unable to open secrets file %s' % SECRETS_FILE)


def get_secret(setting, secrets=secrets):
    """Get secret setting or fail with ImproperlyConfigured"""
    try:
        return secrets[setting]
    except KeyError:
        raise ImproperlyConfigured("Set the {} setting".format(setting))


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

INTERNAL_IPS = ['127.0.0.1']

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'django_q',
    'rest_framework',
    'rest_framework.authtoken',
    'django_filters',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    'captcha',

    'core',
    'observations',
    'metadata',
    'data_access',
    'ingestion',
    'previews',
    'search',
    'api',
    'frontend',
]

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 25
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'core.account.EmailVerificationChallengeMiddleware',

    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'sst_archive.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'frontend/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'frontend.forms.inject_search_form',

                # `allauth` needs this from django
                'django.template.context_processors.request',

                'frontend.context_processors.contact_information',
            ],
        },
    },
]

WSGI_APPLICATION = 'sst_archive.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
        'LOCATION': 'cache_table',
    },
    'memory': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

Q_CLUSTER = {
    'name': 'DjangORM',
    'workers': 4,
    'timeout': 90,
    'retry': 120,
    'queue_limit': 50,
    'bulk': 10,
    'orm': 'default'
}

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = False

USE_TZ = False

SITE_ID = 1

RECAPTCHA_PUBLIC_KEY = '6LczSRAdAAAAAPBN926J7MqfH-QTyWhHqRqYU-4h'
RECAPTCHA_PRIVATE_KEY = '6LczSRAdAAAAAFkHPxSZ1Zp8jD8pNhTAgZ8hPolq'
RECAPTCHA_USE_SSL = True


def _user_display(user):
    if user.first_name or user.last_name:
        return '%s %s' % (user.first_name, user.last_name)
    else:
        return user.email


ACCOUNT_EMAIL_REQUIRED = True
# We need to set max length to < 191 to ensure that the email address can be stored as a primary key in MySQL InnoDB
# tables. This is a MySQL limitation.
ACCOUNT_EMAIL_MAX_LENGTH = 190
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_USER_DISPLAY = _user_display
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_TEMPLATE_EXTENSION = 'html'

# User email verification expires once per quarter.
EMAIL_VERIFICATION_EXPIRATION_PERIOD = datetime.timedelta(weeks=12)
EMAIL_VERIFICATION_CHECK_PERIOD = datetime.timedelta(minutes=5)

ACCOUNT_FORMS = {
    'signup': 'frontend.forms.CustomSignupForm',
    'login': 'frontend.forms.CustomLoginForm',
    'reset_password': 'frontend.forms.CustomResetPasswordForm',
    'change_password': 'frontend.forms.CustomChangePasswordForm',
    'reset_password_from_key': 'frontend.forms.CustomResetPasswordKeyForm'
}

ACCOUNT_ADAPTER = 'core.account.EmailEnforcingAccountAdapter'


# Email backend configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'localhost'
EMAIL_HOST_USER = get_secret('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = get_secret('EMAIL_HOST_PASSWORD')
EMAIL_PORT = 25
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = 'no-reply@astro.su.se'
DEFAULT_CONTACT_EMAIL = 'sst-data-request@astro.su.se'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'
STATICFILES_DIRS = [BASE_DIR / 'assets']

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# This information is available in the FITS cubes, but it may not be safe
# to use it directly from there. At least we shouldn't assume that the
# timezone string will be compatible with Python's set of timezones.
OBSERVATION_TIMEZONE = 'UTC'
DATETIME_FORMAT = 'Y-m-d H:i:s'
DATE_FORMAT = 'Y-m-d'
TIME_FORMAT = 'H:i:s'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Settings for the synchronization of observation data with the SOLARNET
# virtual observatory.

SVO_API_URL = 'https://solarnet.oma.be/service/api/svo'
SVO_USERNAME = get_secret('SVO_USERNAME')
SVO_API_KEY = get_secret('SVO_API_KEY')
