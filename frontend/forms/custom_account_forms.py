from allauth.account.adapter import DefaultAccountAdapter
from allauth.account.forms import ResetPasswordForm, LoginForm, ChangePasswordForm, ResetPasswordKeyForm
from allauth.account.forms import SignupForm
from captcha.fields import ReCaptchaField
from django import forms
from django.forms.utils import ErrorList

from data_access.models import enqueue_swedish_user_registration_request
from frontend.utils import add_bootstrap_form_classes_to_fields

SWEDISH_CITIZEN_HELP_TEXT = '<strong>NOTE:</strong> By specifying that you are a Swedish citizen you will ' \
                            'be able to access data generated by Swedish Universities, but this process will ' \
                            'require a manual verification of your account before access is granted.'


class CustomAccountAdapter(DefaultAccountAdapter):
    def populate_username(self, request, user):
        """
        Fills in a valid username, if required and missing.  If the
        username is already present it is assumed to be valid
        (unique).
        """
        from allauth.account.utils import user_field, user_email, user_username
        from allauth.account import app_settings

        first_name = user_field(user, "first_name")
        last_name = user_field(user, "last_name")
        email = user_email(user)
        username = user_email(user)
        if app_settings.USER_MODEL_USERNAME_FIELD:
            user_username(
                user,
                username
                or self.generate_unique_username(
                    [first_name, last_name, email, username, "user"]
                ),
            )


class CustomErrorList(ErrorList):
    def __str__(self):
        return self.as_divs()

    def as_divs(self):
        if not self:
            return ''
        else:
            return '<div class="alert alert-warning">%s</div>' % ''.join(
                ['<div class="error"><i class="bi bi-exclamation-circle-fill"></i> %s</div>' % e for e in self])


class CustomLoginForm(LoginForm):
    error_css_class = 'alert alert-warning'

    def __init__(self, *args, **kwargs):
        super().__init__(error_class=CustomErrorList, *args, **kwargs)
        add_bootstrap_form_classes_to_fields(self.fields)


class CustomResetPasswordForm(ResetPasswordForm):
    field_order = ['email', 'password1', 'password2', 'swedish_citizen', 'captcha']

    error_css_class = 'alert alert-warning'

    def __init__(self, *args, **kwargs):
        super().__init__(error_class=CustomErrorList, *args, **kwargs)
        add_bootstrap_form_classes_to_fields(self.fields['email'])


class CustomSignupForm(SignupForm):
    field_order = ['email', 'password1', 'password2', 'swedish_citizen', 'captcha']

    error_css_class = 'alert alert-warning'

    def __init__(self, *args, **kwargs):
        super().__init__(error_class=CustomErrorList, *args, **kwargs)
        add_bootstrap_form_classes_to_fields(self.fields)

    def save(self, request):
        user = super().save(request)

        swedish_citizen = self.cleaned_data.get("swedish_citizen")

        # Enqueue the user for manual validation of Swedish .
        if swedish_citizen:
            enqueue_swedish_user_registration_request(user)

        return user

    captcha = ReCaptchaField(label=False)
    swedish_citizen = forms.BooleanField(label='Swedish Citizen', required=False,
                                         help_text=SWEDISH_CITIZEN_HELP_TEXT,
                                         widget=forms.CheckboxInput(attrs={'class': 'form-check-input'}))


class CustomChangePasswordForm(ChangePasswordForm):
    error_css_class = 'alert alert-warning'

    def __init__(self, *args, **kwargs):
        super().__init__(error_class=CustomErrorList, *args, **kwargs)
        add_bootstrap_form_classes_to_fields(self.fields)


class CustomResetPasswordKeyForm(ResetPasswordKeyForm):
    error_css_class = 'alert alert-warning'

    def __init__(self, *args, **kwargs):
        super().__init__(error_class=CustomErrorList, *args, **kwargs)
        add_bootstrap_form_classes_to_fields(self.fields)
