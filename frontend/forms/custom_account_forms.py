from allauth.account.adapter import DefaultAccountAdapter
from allauth.account.forms import ResetPasswordForm, LoginForm, ChangePasswordForm, ResetPasswordKeyForm
from allauth.account.forms import SignupForm
from captcha.fields import ReCaptchaField
from django import forms
from django.forms.utils import ErrorList
from django.utils.safestring import mark_safe

from data_access.models import enqueue_swedish_user_registration_request
from frontend.utils import add_bootstrap_form_classes_to_fields

SWEDISH_USER_HELP_TEXT = '<strong>IMPORTANT:</strong> By specifying that you are a Swedish user your acount will ' \
                         'be put through a manual verification process before you will be able to access data ' \
                         'generated by Swedish Universities. If you are not a Swedish citizen or affiliated ' \
                         'with a Swedish university, do not check this box.'

PURPOSE_HELP_TEXT = 'Please provide a brief description of the purpose for the account, e.g. what type of data you ' \
                   'are interested in.'

REQUIRED_SUFFIX = mark_safe(' <span class="text-primary">*</span>')


class CustomAccountAdapter(DefaultAccountAdapter):
    def populate_username(self, request, user):
        """
        Fills in a valid username, if required and missing.  If the
        username is already present it is assumed to be valid
        (unique).
        """
        from allauth.account.utils import user_field, user_email, user_username
        from allauth.account import app_settings

        first_name = user_field(user, "first_name")
        last_name = user_field(user, "last_name")
        email = user_email(user)
        username = user_email(user)
        if app_settings.USER_MODEL_USERNAME_FIELD:
            user_username(
                user,
                username
                or self.generate_unique_username(
                    [first_name, last_name, email, username, "user"]
                ),
            )


class CustomErrorList(ErrorList):
    def __str__(self):
        return self.as_divs()

    def as_divs(self):
        if not self:
            return ''
        else:
            return '<div class="alert alert-warning">%s</div>' % ''.join(
                ['<div class="error"><i class="bi bi-exclamation-circle-fill"></i> %s</div>' % e for e in self])


class CustomLoginForm(LoginForm):
    error_css_class = 'alert alert-warning'

    def __init__(self, *args, **kwargs):
        super().__init__(error_class=CustomErrorList, *args, **kwargs)
        add_bootstrap_form_classes_to_fields(self.fields)


class CustomResetPasswordForm(ResetPasswordForm):
    field_order = ['email', 'password1', 'password2', 'swedish_user', 'captcha']

    error_css_class = 'alert alert-warning'

    def __init__(self, *args, **kwargs):
        super().__init__(error_class=CustomErrorList, *args, **kwargs)
        add_bootstrap_form_classes_to_fields(self.fields)


class CustomSignupForm(SignupForm):
    field_order = ['email', 'password1', 'password2', 'first_name', 'last_name', 'affiliation', 'purpose',
                   'swedish_user', 'captcha']

    error_css_class = 'alert alert-warning'

    def __init__(self, *args, **kwargs):
        super().__init__(error_class=CustomErrorList, *args, **kwargs)
        add_bootstrap_form_classes_to_fields(self.fields)

        for field_name in self.fields:
            field = self.fields[field_name]
            if field.required:
                field.label_suffix = field.label_suffix + REQUIRED_SUFFIX if field.label_suffix is not None else REQUIRED_SUFFIX

    def save(self, request):
        user = super().save(request)

        user.profile.affiliation = self.cleaned_data.get('affiliation')
        user.profile.purpose = self.cleaned_data.get('purpose')
        user.profile.save()

        swedish_user = self.cleaned_data.get('swedish_user')

        # Enqueue the user for manual validation of Swedish credentials.
        if swedish_user:
            enqueue_swedish_user_registration_request(user)

        return user

    first_name = forms.CharField(required=True, widget=forms.TextInput(attrs={
        'placeholder': 'First name'
    }))
    last_name = forms.CharField(required=True, widget=forms.TextInput(attrs={
        'placeholder': 'Last name'
    }))
    affiliation = forms.CharField(required=True, widget=forms.TextInput(attrs={
        'placeholder': 'Affiliation (University or Research center)'
    }))
    purpose = forms.CharField(widget=forms.Textarea(attrs={'rows': 2, 'cols': 20}), help_text=PURPOSE_HELP_TEXT)

    captcha = ReCaptchaField(label=False)
    swedish_user = forms.BooleanField(label='Swedish User', required=False,
                                      help_text=SWEDISH_USER_HELP_TEXT,
                                      widget=forms.CheckboxInput(attrs={'class': 'form-check-input'}))


class CustomChangePasswordForm(ChangePasswordForm):
    error_css_class = 'alert alert-warning'

    def __init__(self, *args, **kwargs):
        super().__init__(error_class=CustomErrorList, *args, **kwargs)
        add_bootstrap_form_classes_to_fields(self.fields)


class CustomResetPasswordKeyForm(ResetPasswordKeyForm):
    error_css_class = 'alert alert-warning'

    def __init__(self, *args, **kwargs):
        super().__init__(error_class=CustomErrorList, *args, **kwargs)
        add_bootstrap_form_classes_to_fields(self.fields)
